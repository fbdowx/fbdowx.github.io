// Language translations
const translations = {
    en: {
        enterName: "Enter your name.",
        enterEmail: "Enter your email.",
        enterSubject: "Enter Subject.",
        enterMessage: "Enter your message.",
        thankYouMessage: "Thank you <b>${name.value}</b>, for your message, we will get back to you asap, if needed.",
        errorMessage: "An error occurred. Please try again.",
        sendingMessage: "Sending ..."
    },
    es: {
        enterName: "Ingrese su nombre.",
        enterEmail: "Ingrese su correo electrónico.",
        enterSubject: "Ingrese el asunto.",
        enterMessage: "Ingrese su mensaje.",
        thankYouMessage: "Gracias <b>${name.value}</b>, por su mensaje, nos pondremos en contacto con usted lo antes posible si es necesario.",
        errorMessage: "Se produjo un error. Por favor, inténtelo de nuevo.",
        sendingMessage: "Enviando ..."
    },
    ar: {
        enterName: "ادخل اسمك.",
        enterEmail: "ادخل بريدك الإلكتروني.",
        enterSubject: "ادخل الموضوع.",
        enterMessage: "أدخل رسالتك.",
        thankYouMessage: "شكراً لك <b>${name.value}</b> على رسالتك، سنعود لك في أقرب وقت ممكن إذا لزم الأمر.",
        errorMessage: "حدث خطأ. الرجاء المحاولة مرة أخرى.",
        sendingMessage: "جار الإرسال ..."
    },
    pt: {
        enterName: "Digite seu nome.",
        enterEmail: "Digite seu email.",
        enterSubject: "Digite o assunto.",
        enterMessage: "Digite sua mensagem.",
        thankYouMessage: "Obrigado <b>${name.value}</b>, pela sua mensagem, entraremos em contato o mais breve possível, se necessário.",
        errorMessage: "Ocorreu um erro. Por favor, tente novamente.",
        sendingMessage: "Enviando ..."
    },
    bn: {
        enterName: "আপনার নাম লিখুন।",
        enterEmail: "আপনার ইমেল লিখুন।",
        enterSubject: "বিষয় লিখুন।",
        enterMessage: "আপনার বার্তা লিখুন।",
        thankYouMessage: "ধন্যবাদ <b>${name.value}</b>, আপনার বার্তার জন্য, যদি প্রয়োজন হয় তবে আমরা সর্বোত্তম সম্ভাবে তাড়াতাড়ি ফিরে আসব।",
        errorMessage: "একটি ত্রুটি ঘটেছে। অনুগ্রহ করে আবার চেষ্টা করুন।",
        sendingMessage: "প্রেরণ হচ্ছে ..."
    },
    th: {
        enterName: "กรุณากรอกชื่อของคุณ",
        enterEmail: "กรุณากรอกอีเมลของคุณ",
        enterSubject: "กรุณากรอกหัวข้อ",
        enterMessage: "กรุณากรอกข้อความของคุณ",
        thankYouMessage: "ขอบคุณคุณ <b>${name.value}</b> สำหรับข้อความของคุณ เราจะติดต่อกลับโดยเร็วที่สุดหากจำเป็น",
        errorMessage: "เกิดข้อผิดพลาด กรุณาลองอีกครั้ง",
        sendingMessage: "กำลังส่ง ..."
    },
    vi: {
        enterName: "Nhập tên của bạn.",
        enterEmail: "Nhập email của bạn.",
        enterSubject: "Nhập chủ đề.",
        enterMessage: "Nhập tin nhắn của bạn.",
        thankYouMessage: "Cảm ơn bạn <b>${name.value}</b>, vì tin nhắn của bạn, chúng tôi sẽ phản hồi lại bạn sớm nhất có thể nếu cần thiết.",
        errorMessage: "Đã xảy ra lỗi. Vui lòng thử lại.",
        sendingMessage: "Đang gửi ..."
    },
    tl: {
        enterName: "Ilagay ang iyong pangalan.",
        enterEmail: "Ilagay ang iyong email.",
        enterSubject: "Ilagay ang paksa.",
        enterMessage: "Ilagay ang iyong mensahe.",
        thankYouMessage: "Salamat <b>${name.value}</b>, sa iyong mensahe, babalikan ka namin sa lalong madaling panahon kung kinakailangan.",
        errorMessage: "May naganap na error. Subukan muli.",
        sendingMessage: "Nagpapadala ..."
    },
    id: {
        enterName: "Masukkan nama Anda.",
        enterEmail: "Masukkan email Anda.",
        enterSubject: "Masukkan subjek.",
        enterMessage: "Masukkan pesan Anda.",
        thankYouMessage: "Terima kasih <b>${name.value}</b>, atas pesan Anda, kami akan segera menghubungi Anda jika diperlukan.",
        errorMessage: "Terjadi kesalahan. Silakan coba lagi.",
        sendingMessage: "Mengirim ..."
    }
};

// Function to get language from HTML lang attribute
function getLanguage() {
    return document.documentElement.lang || 'en'; // Default to English if no lang attribute found
}

// Function to translate text based on current language
function translate(key, params = {}) {
    const lang = getLanguage();
    const translation = translations[lang][key] || translations['en'][key]; // Fallback to English
    return Object.entries(params).reduce((str, [param, value]) => str.replace('${' + param + '}', value), translation);
}

// Function to add red border style to input field
function addRedBorder(inputField) {
    inputField.style.border = '1px solid red';
}

// Function to remove red border style from input field
function removeRedBorder(inputField) {
    inputField.style.border = '';
}

document.getElementById('send').addEventListener('click', async function() {
    const name = document.getElementById('name');
    const email = document.getElementById('email');
    const country = document.getElementById('country');
    const message = document.getElementById('message');
    const result2 = document.getElementById('result2');
    const sendbtn = document.getElementById('send');

    if (!name.value || !email.value || !country.value || !message.value) {
        if (!name.value) {
            name.placeholder = translate('enterName');
            addRedBorder(name);
        }
        if (!email.value) {
            email.placeholder = translate('enterEmail');
            addRedBorder(email);
        }
        if (!country.value) {
            country.placeholder = translate('enterSubject');
            addRedBorder(country);
        }
        if (!message.value) {
            message.placeholder = translate('enterMessage');
            addRedBorder(message);
        }
        return;
    }

    sendbtn.innerHTML = `<div>${translate('sendingMessage')}</div>`;

    try {
        const response = await fetch('https://fbdownk.000webhostapp.com/contact.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                name: name.value, 
                email: email.value, 
                country: country.value, 
                message: message.value 
            })
        });

        const data = await response.json();

        result2.innerHTML = response.status === 200 ? 
            `<div class="success">${translate('thankYouMessage', { 'name.value': name.value })}</div>` : 
            data.message ? `<div class="error"><i class="err"></i>${data.message}</div>` : 
            translate('errorMessage');

        sendbtn.innerHTML = 'Send';
    } catch (error) {
        result2.innerHTML = translate('errorMessage');
        sendbtn.innerHTML = 'Send';
    }

       setTimeout(() => { 
        result2.innerHTML = ''; 
        name.placeholder = translate('enterName');
        email.placeholder = translate('enterEmail');
        country.placeholder = translate('enterSubject');
        message.placeholder = translate('enterMessage');
        // Remove red border from input fields
        removeRedBorder(name);
        removeRedBorder(email);
        removeRedBorder(country);
        removeRedBorder(message);
    }, 2000);
});

// Event listeners to remove red border when user starts typing
document.getElementById('name').addEventListener('input', function() {
    removeRedBorder(this);
});
document.getElementById('email').addEventListener('input', function() {
    removeRedBorder(this);
});
document.getElementById('country').addEventListener('input', function() {
    removeRedBorder(this);
});
document.getElementById('message').addEventListener('input', function() {
    removeRedBorder(this);
});
       
